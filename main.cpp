/* ***********************************************************************
team justice names here:
xander maniaci

how to compile program throuth terminal
1. g++ main.cpp 
2. ./a.out programming_assignment_1-test_file_4.c

how to run makfile
1.  make
2. ./commentParser programming_assignment_1-test_file_4.c

description:
Write a program in C or C++ that will identify and remove comments from an input test file.

Your program should utilize a procedurally-driven deterministic finite state automoton (DFA) to 
identify comments. Table-driven DFA solutions will have reduced scores (per the grading rubric) 
since such solutions are typically automatically generated by compiler tools such as Yacc, Lex, Bison, etc.
*********************************************************************** */
#include <iostream>
#include <fstream>
#include<stack>

using namespace std;

/** **************************************************************************************
function Headers                         
 *****************************************************************************************/
void commentParser(std::ifstream& inputStream,string fileName);
// functions to handle the open and close tags as they come into the parser.

/** **************************************************************************************
driver program 
@pre: takes a input c file
@post: removes the comments in the .c file input and outputs a c file                        
 *****************************************************************************************/
int main(int argc, char *argv[]) {

    // we expect the name of the file as an argument to the program.
    if (argc != 2) {  
        std::cout << "usage: " << argv[0] << " nameOfAnInputFile" << std::endl;
        exit(1);
    }

    std::ifstream inputStream;
    inputStream.open(argv[1], std::ios::in);    // open for reading


    if(!inputStream.is_open()) {
        std::cout << "Unable top open " << argv[1] << ". Terminating...";
        exit(2);
    }

    inputStream.close();

    std::cout << "found file: " <<argv[1] << std::endl;

    commentParser(inputStream,argv[1]);

    return 0;
}


/** **************************************************************************************
function to remove comments by using a dfa to traverse through our file.
@pre: takes a ifstream object and a filename
@post: removes the comments in the .c file input and outputs a c file                        
 *****************************************************************************************/
void commentParser(std::ifstream& inputStream,string fileName){

    inputStream.open(fileName, std::ios::in);

    string file = "";
     int state = 0;
     char c;
    //keep looping through our dfa as long as we have input to read
     while (!inputStream.eof()){

        cout<<c;

        //cout<<state<<endl;

        inputStream.get(c);

        //state 0 grabs everything until we reach a /
        if(state == 0 ){

            //if we find a slash then we want to transition to state 1
            if(c == '/'){
                state = 1;
            //otherwise add the input to the file.
            }else{
                file +=c;
            }
        // if we find a / then we need to check if the next char is a * or a /
        }else if(state == 1){

            //if we find a slash after the initial slash then we are in a c style comment so progress to state 2
            if(c == '/'){
                //adds two spaces to the file to account for the double slash.
                file +="  ";
                state = 2;
            //otherwise if we find a /* then progress to state 3 c++ style comment
            }else if(c == '*'){

                //adds two spaces to the file to account for the slash star.
                file +="  ";
                state = 3;
            // otherwise we are not in a comment back to state 0
            }else{
                file +='/';
                state = 0;
            }

        //if we are in a c style comment then
        }else if(state == 2){

            //if we find a next line char then c style comment is done, back to state 0
            if(c == '\n'){
                file +=c;
                state = 0;
            }else{
                //replace that comment with spaces
                file +=' ';

            }
            
        //state for being inside a c++ style comment
        }else if(state == 3){

            //if we find a next line char then c style comment is done, back to state 0
            if(c == '*'){
                file +=' ';
                state = 4;
            //if we find a next line char then preserve it.
            }else if(c == '\n'){
                file +=c;
            }else{
                //replace that comment with spaces
                file +=' ';

            }
            
        //state to check if c++ style comment should be ending
        }else if(state == 4){

            //if we find a next line char then c style comment is done, back to state 0
            if(c == '/'){
                //set double space to handle places where */ should be
                file +=" ";
                state = 0;
            
            }else if(c == '*'){
                //set double space to handle places where */ should be
                file +=" ";
            }else if(c == '\n'){
                //set double space to handle places where */ should be
                file +=c;
            }else{
                //replace that comment with spaces
                file +=" ";
                state = 3;
            }
            
            //set input in comments to white space unless we fund a next line character
        }

     }

     inputStream.close();

     cout<<endl;
     cout<<"==================output file=================="<< endl;
     cout<< file;
     
   
  
}
